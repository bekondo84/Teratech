
/*                                                                                                      
 * To change this template, choose Tools | Templates                                                                                                    
 * and open the template in the editor.
 */

/*
 * PrincipalSceen.java
 *
 * Created on 27 mai 2016, 17:11:13
 */
package com.megatim.common.utilities;

import com.megatim.common.clients.AbstractEditTemplateDialog;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToolBar;

import com.megatim.common.clients.CommonsUtilities;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;

/**
 *
 * @author DEV_4
 */
public abstract class PrincipalFrame extends javax.swing.JFrame implements WindowListener {

    public static PrincipalFrame FRAME;

    /**
     * Creates new form PrincipalSceen
     */
    public PrincipalFrame() {
        initComponents();
        PrincipalFrame.FRAME = this;
        this.setIconImage(getIconeApplication().getImage());
        this.setTitle("NONE");
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);
        optionsPanel.setVisible(false);
        //buildViewComponents();
    }

    public JDesktopPane getjDesktopPane1() {
        return jDesktopPane1;
    }

    public void setjDesktopPane1(JDesktopPane jDesktopPane1) {
        this.jDesktopPane1 = jDesktopPane1;
    }
    
    protected Image midlePanel(){
    	ImageIcon icon =new ImageIcon(ClassLoader.getSystemResource("com/megatim/tools/images/home.png"));
       return icon.getImage();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        toolBarPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btdeconnexion = new javax.swing.JButton();
        bannierrePanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        optionsPanel = new javax.swing.JPanel();
       
        jDesktopPane1 = new javax.swing.JDesktopPane(){
        	ImageIcon icon = new ImageIcon(midlePanel());
        	Image image = icon.getImage();
			@Override
			protected void paintComponent(Graphics g) {
				//super.paintComponent(g);
				//g.drawImage(newImage, 0, 0, this);
				if(image!=null){
					Graphics2D g2d = (Graphics2D)g;
					g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
					g2d.drawImage(image, 0, 0,getWidth(), getHeight(), null);
					setOpaque(true);
					repaint();
					}
			}
        	
        	
        	
        };
        
        menubar = new javax.swing.JMenuBar();
        toolBarEngagement = new JToolBar();
        toolBarEngagementCF = new JToolBar();
        toolBarMandat = new JToolBar();
        toolBarMandatCF = new JToolBar();
        toolBarMandatAC = new JToolBar();
        toolBarTitreRecette = new JToolBar();
        toolBarTitreRecetteAC = new JToolBar();
        toolBarTools = new JToolBar();
        toolBarFin = new JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        toolBarPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));      
        javax.swing.GroupLayout toolBarPanelLayout = new javax.swing.GroupLayout(toolBarPanel);
        toolBarPanel.setLayout(toolBarPanelLayout);
        toolBarPanelLayout.setHorizontalGroup(
        		toolBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toolBarPanelLayout.createSequentialGroup()
                .addComponent(toolBarEngagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                /*.addComponent(toolBarEngagementCF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolBarMandat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolBarMandatCF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolBarMandatAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolBarTitreRecette, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolBarTitreRecetteAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                 .addComponent(toolBarTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)*/
                .addComponent(toolBarFin,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        toolBarPanelLayout.setVerticalGroup(
        		toolBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBarEngagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
           /*  .addComponent(toolBarEngagementCF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
            .addComponent(toolBarMandat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
             .addComponent(toolBarMandatCF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
             .addComponent(toolBarMandatAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
            .addComponent(toolBarTitreRecette, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
            .addComponent(toolBarTitreRecetteAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
             .addComponent(toolBarTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)*/
            .addGap(0, 0, 0)
            .addComponent(toolBarFin,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        
        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            //.addGap(0, 779, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          //  .addGap(0, 23, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            //.addGap(0, 139, Short.MAX_VALUE)
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           // .addGap(0, 499, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(optionsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);
        jSplitPane1.setRightComponent(jDesktopPane1);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           // .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(toolBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                //.addGap(0, 0, 0)
                .addComponent(jSplitPane1)
              //  .addGap(0, 0, 0)
               // .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                )
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btdeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdeconnexionActionPerformed
        btdeconnexionActionPerformed();
    }//GEN-LAST:event_btdeconnexionActionPerformed

    protected void btdeconnexionActionPerformed() {
        ;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel bannierrePanel;
    private javax.swing.JButton btdeconnexion;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel toolBarPanel;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSplitPane jSplitPane1;
    protected javax.swing.JMenuBar menubar;
    protected JToolBar toolBarEngagement;
    protected JToolBar toolBarEngagementCF;
    protected JToolBar toolBarMandat;
    protected JToolBar toolBarMandatCF;
    protected JToolBar toolBarMandatAC;
    protected JToolBar toolBarTitreRecette;
    protected JToolBar toolBarTitreRecetteAC;
    protected JToolBar toolBarTools;
    protected JToolBar toolBarFin;
    private javax.swing.JPanel optionsPanel;
    // End of variables declaration//GEN-END:variables
    private JLabel lblIcon;
    private JLabel lblTitle;

    private JPanel entetePanel;

    private JInternalFrame currentframe = null;

    public static PrincipalFrame principalScreen = null;

    private JPanel optionPanel = null;

    //private JInternalFrame currentInternalFrame = null; showInsideDesktopPane
    protected void showInsideDesktopPane(String frameName) {

        try {
            //Initialisation du frame
            JInternalFrame frame = (JInternalFrame) Class.forName(frameName).newInstance();
            //frame.setSize(800, 500);
            //Rendre visible le frame
            frame.setVisible(true);
            frame.setResizable(Boolean.TRUE);
            Dimension desktopSize = jDesktopPane1.getSize();
            Dimension jInternalFrameSize = frame.getSize();
            frame.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                    (desktopSize.height - jInternalFrameSize.height) / 2);
            //Netooyage du destop
            if (currentframe != null) {
                this.jDesktopPane1.remove(currentframe);
            }
            //insertion du frame dans 
            this.jDesktopPane1.add(frame);

            this.jDesktopPane1.repaint();
            //Initilisation de current
            currentframe = frame;
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        }

    }
    
     //private JInternalFrame currentInternalFrame = null; showInsideDesktopPane
    public void showDialog(String frameName,Class<?> clazz) {

        try {
            //Initialisation du frame
            JDialog frame = (JDialog) Class.forName(frameName).newInstance();
            //frame.setSize(800, 500);
            if(frame instanceof AbstractEditTemplateDialog){
                Object  value = clazz.newInstance();
                ((AbstractEditTemplateDialog)frame).setCurrentObject((Comparable)value);
            }
            
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            //Rendre visible le frame
            frame.setVisible(true);
            
            
            //Initilisation de current
            //currentframe = frame;
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        }

    }

    protected void showInsideDesktopPanel(JInternalFrame frame) {

        try {
            //Initialisation du frame
            //JInternalFrame frame = (JInternalFrame) Class.forName(frameName).newInstance();
            //frame.setSize(800, 500);
            //Rendre visible le frame
            frame.setVisible(true);
            frame.setResizable(Boolean.TRUE);
            Dimension desktopSize = jDesktopPane1.getSize();
            Dimension jInternalFrameSize = frame.getSize();
            frame.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                    (desktopSize.height - jInternalFrameSize.height) / 2);
            //Netooyage du destop
            if (currentframe != null) {
                this.jDesktopPane1.remove(currentframe);
            }
            //insertion du frame dans 
            this.jDesktopPane1.add(frame);

            this.jDesktopPane1.repaint();
            //Initilisation de current
            currentframe = frame;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     *
     */
    public void buildViewComponents() {
        //optionsPanel.setSize(100, WIDTH);
        optionsPanel.setLayout(new BorderLayout());
        optionsPanel.add(buildOptionPanel(), BorderLayout.CENTER);
        lblIcon = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        buildMenuBar();
        // traitement de la barre d'outils
        buildToolBar();
        toolBarEngagement.setVisible(statutToolbar());
        toolBarFin.setVisible(statutToolbar());
        toolBarPanel.setVisible(statutToolbar());
        this.setTitle(getTitle());
        this.addWindowListener(this);
        principalScreen = this;
    }

    /**
     *
     * @param oldPanel
     * @param newPanel
     */
    public void setBannierrePanel(JPanel oldPanel, JPanel newPanel) {
        this.bannierrePanel.remove(oldPanel);
        bannierrePanel.add(newPanel, BorderLayout.CENTER);
    }

    public ImageIcon getImage() {
        ImageIcon icon = new ImageIcon(getClass().getResource("/com/megatimgroup/editdata/images/banniere.png"));
        return icon;
    }
    
    public ImageIcon getIconeApplication() {
        ImageIcon icon = CommonsUtilities.getIcone();
       // ImageIcon icon = new ImageIcon(getClass().getResource("/com/megatimgroup/editdata/images/banniere.png"));
        return icon;
    }

    public JPanel getHeaderPanel() {
        if (headerPanel == null) {
            headerPanel = new JPanel();
        }
        return headerPanel;
    }

    public JPanel getToolBarPanel() {
        if (toolBarPanel == null) {
            toolBarPanel = new JPanel();
        }
        return toolBarPanel;
    }

    public JPanel getBannierrePanel() {

        if (bannierrePanel == null) {
            bannierrePanel = new JPanel();
        }
        return bannierrePanel;
    }

    public void showInsideDesktopPaneSpecial(String frameName) {
        showInsideDesktopPane(frameName);
    }

    public JButton getBtdeconnexion() {
        return btdeconnexion;
    }

    /**
     * Construction de la zone des boutons
     *
     * @return
     */
    public abstract JPanel buildOptionPanel();

    /**
     *
     * @param items
     * @return
     */
    public abstract void buildMenuBar();

    /**
     *
     * @param items
     * @return
     */
    public abstract void buildToolBar();
    
    public  boolean statutToolbar(){
    	return true;
    };

    /**
     * Commande d'execution des button
     *
     * @param index
     */
    public abstract void accept(int index);

    /**
     *
     * @param e
     */
    public void windowOpened(WindowEvent e) {
        ;
    }

    public void windowClosed(WindowEvent e) {
        ;
    }

    public void windowIconified(WindowEvent e) {
        ;
    }

    public void windowDeiconified(WindowEvent e) {
        ;
    }

    public void windowActivated(WindowEvent e) {
        ;
    }

    public void windowDeactivated(WindowEvent e) {
        ;
    }

    public void windowClosing(WindowEvent e) {
        ; //To change body of generated methods, choose Tools | Templates.
    }

    public JPanel getOptionsPanel() {
        return optionsPanel;
    }
    
}
