/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.megatim.common.clients;

import com.bekosoftware.genericmanagerlayer.core.ifaces.GenericManager;
import com.megatim.common.utilities.*;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *f
 * @author DEV_4
 */
public abstract class AbstractTreePanel<T extends Object > extends javax.swing.JPanel  implements  MouseListener{

    /**
     * Creates new form AbstractTablePanel
     */
    public AbstractTreePanel() {
        initComponents();
        viewComponents();
    }

    private void viewComponents(){        
        
        btadd.setText("");
        btadd.setIcon(getNewIcon());
        btadd.setToolTipText(getNewTooltip());
        btedit.setText("");
        btedit.setIcon(getUpdateIcon());
        btedit.setToolTipText(getUpdateTooltip());
        btdelete.setText("");
        btdelete.setIcon(getDeleteIcon());
        btdelete.setToolTipText(getDeleteTooltip());
        btview.setText("");
        btview.setIcon(getViewIcon());
        btview.setToolTipText(getViewTooltip());
        
        if(getRender()!=null){
            tree.setCellRenderer(getRender());
        }
        if(getEditor()!=null){
            tree.setCellEditor(getEditor());
        }
        tree.addMouseListener(this);
       //this.enableAddButton(Boolean.FALSE);this.enableEditButton(Boolean.FALSE);this.enableDeleteButton(Boolean.FALSE);
        Font times = new Font(CommonsUtilities.POLICE_APPLICATION, Font.BOLD, 14);
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        optionsToolPane = new javax.swing.JToolBar();
        btadd = new javax.swing.JButton();
        btedit = new javax.swing.JButton();
        btdelete = new javax.swing.JButton();
        btview = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jScrollPane1.setViewportView(tree);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        optionsToolPane.setRollover(true);
        optionsToolPane.setToolTipText("");

        btadd.setText("jButton1");
        btadd.setFocusable(false);
        btadd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btadd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btaddActionPerformed(evt);
            }
        });
        optionsToolPane.add(btadd);

        btedit.setText("jButton2");
        btedit.setFocusable(false);
        btedit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btedit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bteditActionPerformed(evt);
            }
        });
        optionsToolPane.add(btedit);

        btdelete.setText("jButton1");
        btdelete.setFocusable(false);
        btdelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btdelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btdeleteActionPerformed(evt);
            }
        });
        optionsToolPane.add(btdelete);

        btview.setText("jButton1");
        btview.setFocusable(false);
        btview.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btview.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btviewActionPerformed(evt);
            }
        });
        optionsToolPane.add(btview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(optionsToolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(optionsToolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btaddActionPerformed
        try {
            // TODO add your handling code here:
            nouveau();
        } catch (Exception ex) {
            Logger.getLogger(AbstractTreePanel.class.getName()).log(Level.SEVERE, null, ex);
           Messages.Messages(getApplicationFrame(),true, NotificationType.ERROR, "Erreur lors du traitement\nVeuillez consulter les détails", ex.getMessage(),"");
        }
    }//GEN-LAST:event_btaddActionPerformed

    private void bteditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bteditActionPerformed
        try {
            // TODO add your handling code here:
            modifier();
        } catch (Exception ex) {
            Logger.getLogger(AbstractTreePanel.class.getName()).log(Level.SEVERE, null, ex);
            Messages.Messages(getApplicationFrame(),true, NotificationType.ERROR, "Erreur lors du traitement\nVeuillez consulter les détails", ex.getMessage(),"");
        }
    }//GEN-LAST:event_bteditActionPerformed

    private void btdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdeleteActionPerformed
        try {
            // TODO add your handling code here:
            supprimer();
        }catch(IllegalStateException ex){
           Logger.getLogger(AbstractTreePanel.class.getName()).log(Level.SEVERE, null, ex);
          Messages.Messages(getApplicationFrame(), true, NotificationType.ERROR, MessagesBundle.getMessage("delete.entity.error.msg"), MessagesBundle.getMessage("delete.entity.error.msg.detail"),"");
        }  catch (Exception ex) {
            Logger.getLogger(AbstractTreePanel.class.getName()).log(Level.SEVERE, null, ex);
            Messages.Messages(getApplicationFrame(),true, NotificationType.ERROR, "Erreur lors du traitement\nVeuillez consulter les détails", ex.getMessage(),"");
        }
    }//GEN-LAST:event_btdeleteActionPerformed

    private void btviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btviewActionPerformed
        try {
            // TODO add your handling code here:
            consulter();
        } catch (Exception ex) {
            Logger.getLogger(AbstractTreePanel.class.getName()).log(Level.SEVERE, null, ex);
          Messages.Messages(getApplicationFrame(),true, NotificationType.ERROR, "Erreur lors du traitement\nVeuillez consulter les détails", ex.getMessage(),"");
        }
    }//GEN-LAST:event_btviewActionPerformed

  
    /**
     * 
     * @return 
     */
    public AbstractTreeBaseListModel getModel() {
        return model;
    }

    /**
     * 
     * @param model 
     */
    public void setModel(AbstractTreeBaseListModel model) {
        this.model = model;        
        this.tree.setModel(model);
        TreeNode node = (TreeNode) model.getRoot();
        tree.expandPath(new TreePath(node));
    }
 
    /**
     * Acces a la bare d'outils
     * @return 
     */
    public JToolBar getOptionsToolPane() {
        return optionsToolPane;
    }
    
    
     /**
    * 
    * @return 
    */
   protected ImageIcon getNewIcon(){

       return new ImageIcon(getClass().getResource("/com/megatim/tools/images/button_add.png"));
   }
   /**
    * 
    * @return 
    */
   protected String getNewTitle(){
       return MessagesBundle.getMessage("new.title");
   }

    /**
    * 
    * @return 
    */
   protected String getNewTooltip(){
       return MessagesBundle.getMessage("new.tooltip");
   }
   /**
    * 
    * @return 
    */
   protected ImageIcon getUpdateIcon(){
       return new ImageIcon(getClass().getResource("/com/megatim/tools/images/button_edit.png"));
   }

   /**
    * 
    * @return 
    */
   protected String getUpdateTitle(){
       return MessagesBundle.getMessage("update.title");
   }
    /**
    * 
    * @return 
    */
   protected String getUpdateTooltip(){
       return MessagesBundle.getMessage("update.tooltip");
   }
   /**
    * 
    * @return 
    */
   protected ImageIcon getDeleteIcon(){
        return new ImageIcon(getClass().getResource("/com/megatim/tools/images/button_delete.png"));
   }
   /**
    * 
    * @return 
    */
   protected String getDeleteTitle(){
       return MessagesBundle.getMessage("delete.title");
   }

    /**
    * 
    * @return 
    */
   protected String getDeleteTooltip(){
       return MessagesBundle.getMessage("delete.tooltip");
   }
   /**
    * 
    * @return 
    */
   protected ImageIcon getViewIcon(){
       return new ImageIcon(getClass().getResource("/com/megatim/tools/images/button_display.png"));
   }

   /**
    * 
    * @return 
    */
   protected String getViewTitle(){
       return MessagesBundle.getMessage("view.title");
   }
    /**
    * 
    * @return 
    */
   protected String getViewTooltip(){
       return MessagesBundle.getMessage("view.tooltip");
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btadd;
    protected javax.swing.JButton btdelete;
    protected javax.swing.JButton btedit;
    protected javax.swing.JButton btview;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar optionsToolPane;
    protected javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
    protected AbstractTreeBaseListModel model = null ;
    protected boolean summary = Boolean.FALSE;
    
    /**
	 * Fenetre interne d'edition pour 
	 * @param object
	 * @param manager
     * @param model
	 * @param typeOperation
	 * @param window
	 * @return
     * @throws java.lang.Exception
	 */
    protected abstract JDialog getEditDialog(T object , GenericManager manager,AbstractTreeBaseListModel model , TypeOperation typeOperation , JFrame window) throws Exception;
    
      /**   i
     * Classe responsable de l'edition du manager
     */
    public void nouveau() throws Exception{
        JDialog nouveauFrame = getEditDialog(null, getManager(),model, TypeOperation.NEW,getApplicationFrame());
        nouveauFrame.setLocationRelativeTo(getApplicationFrame());
        nouveauFrame.setVisible(true);
       
    }
     /**
      * Supprime une element e
      */
     public void supprimer() throws  Exception{
         
         if(getSelectedObjects()==null){
             Messages.Messages(getApplicationFrame(), true, NotificationType.INFOS, "Aucune ligne n'est sélectionnée !", "", "");
             
             return ;
         }
                       
         int choice = JOptionPane.showConfirmDialog(this, "confirmation message", "Confirmation", JOptionPane.YES_NO_OPTION);
         
        
         
     }
     
      /**
     * Classe responsable de lq ;ise q jour du manager
     */
    public void modifier() throws  Exception{
        //Optention de la ligne selectionne
       
    }
    
    /**
     * Consultation
     */
    public void consulter() throws Exception{
        
          if(getSelectedObjects()==null){
              Messages.Messages(getApplicationFrame(), true, NotificationType.INFOS, "Aucune ligne n'est sélectionnée !", "", "");
              return ;
          }
          //Une ligne est selectionnée
         JDialog nouveauFrame = getEditDialog(getSelectedObjects().get(0), getManager(),model, TypeOperation.VIEW,getApplicationFrame());
         nouveauFrame.setLocationRelativeTo(getApplicationFrame());
       
         nouveauFrame.setVisible(true);
         
    }
    
    
     /**
      * Listes des elements selectionnés dans le tableau
      * @return 
      */   
     protected List<T> getSelectedObjects(){
       
       //boolean updatable = true ,deletable=true;
       //Recuperation de la liste des lignes selectionnés       
       
       return null;
   }
   
   /**
    * Mise a disposition d'un manager
    * @return 
    */
   protected abstract GenericManager getManager() throws Exception;
   
   /**
    * Instance de la fenetre principale
    * @return 
    */
   protected abstract JFrame getApplicationFrame();
   
   /**
    * Renvoie de Cell Render de la 
    * @return 
    */
   protected  TreeCellRenderer getRender(){
       return null;
   }
   
   /**
    * 
    * @return 
    */
   protected TreeCellEditor getEditor(){
       return null;
   }
   
   /**
    * 
    * @param value 
    */
   public void enableEditButton(Boolean value){
       btedit.setEnabled(value);
       btedit.setVisible(value);
   }
   /**
    * 
    * @param value 
    */
   public void enableAddButton(Boolean value){
       btadd.setEnabled(value);
       btadd.setVisible(value);
   }
   /**
    * 
    * @param value 
    */
   public void enableViewButton(Boolean value){
       btview.setEnabled(value);
       btview.setVisible(value);
   }
   
   /**
    * 
    * @param value 
    */
   public void enableDeleteButton(Boolean value){
       btdelete.setEnabled(value);
       btdelete.setVisible(value);
   }
   
   /**
    * 
    * @param value 
    */
   protected void enabledSubTotalTable(Boolean value){       
       summary = value;
   }

   /**
    * Arbre de donnees
    * @return 
    */
    public JTree getTree() {
        return tree;
    }
   
    /**
     * 
     * @param e 
     */
    @SuppressWarnings("empty-statement")
    public void mouseClicked(MouseEvent e) {
        ;
    }

    /**
     * 
     * @param e 
     */
    @SuppressWarnings("empty-statement")
    public void mousePressed(MouseEvent e) {
        ;
    }

    /**
     * 
     * @param e 
     */
    @SuppressWarnings("empty-statement")
    public void mouseReleased(MouseEvent e) {
        ;
    }

    /**
     * 
     * @param e 
     */
    @SuppressWarnings("empty-statement")
    public void mouseEntered(MouseEvent e) {
        ;
    }

    /**
     * 
     * @param e 
     */
    @SuppressWarnings("empty-statement")
    public void mouseExited(MouseEvent e) {
        ;
    }
   
}
